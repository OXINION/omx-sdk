(function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&o(a)}).observe(document,{childList:!0,subtree:!0});function s(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(n){if(n.ep)return;n.ep=!0;const r=s(n);fetch(n.href,r)}})();let t=null;const c={async initialize(){return await new Promise(e=>setTimeout(e,500)),!0},async healthCheck(){return{overall:"healthy",services:{geotrigger:"healthy",email:"healthy",webhook:"healthy",beacon:navigator.bluetooth?"healthy":"unhealthy",pushNotification:"Notification"in window?"healthy":"unhealthy"}}},geotrigger:{addRegion(e){return console.log("Added region:",e),!0},async getCurrentLocation(){return new Promise((e,i)=>{if(!navigator.geolocation){i(new Error("Geolocation not supported"));return}navigator.geolocation.getCurrentPosition(s=>e({latitude:s.coords.latitude,longitude:s.coords.longitude,accuracy:s.coords.accuracy}),s=>i(s))})},async startMonitoring(e){return console.log("Started geofence monitoring"),setTimeout(()=>{e({type:"enter",regionId:"demo-region",location:{latitude:37.7749,longitude:-122.4194},timestamp:new Date})},3e3),!0},stopMonitoring(){return console.log("Stopped geofence monitoring"),!0},isMonitoring(){return!1}},email:{async send(e){return await new Promise(i=>setTimeout(i,300)),{success:!0,messageId:"msg_"+Date.now(),statusCode:200}},validateEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}},webhook:{async testWebhook(e){return await new Promise(i=>setTimeout(i,400)),{success:!0,status:200,duration:300}},async createSubscription(e,i){return await new Promise(s=>setTimeout(s,200)),{id:"sub_"+Date.now(),url:e,events:i,active:!0,createdAt:new Date}}},beacon:{async initialize(){if(!navigator.bluetooth)throw new Error("Web Bluetooth not supported");return await new Promise(e=>setTimeout(e,500)),!0},addRegion(e){console.log("Added beacon region:",e)},async startScanning(){return console.log("Started beacon scanning"),!0},stopScanning(){return console.log("Stopped beacon scanning"),!0},getAnalytics(){return{totalBeacons:0,regionsMonitored:1,events:{enters:0,exits:0,ranges:0}}}},pushNotification:{async initialize(){if(!("serviceWorker"in navigator)||!("PushManager"in window))throw new Error("Push notifications not supported");return await new Promise(e=>setTimeout(e,300)),!0},async subscribe(){return Notification.permission!=="granted"&&await Notification.requestPermission()!=="granted"?{success:!1,error:"Permission denied"}:{success:!0,subscriptionId:"sub_"+Date.now()}},async showLocalNotification(e){Notification.permission==="granted"&&new Notification(e.title,{body:e.body,icon:e.icon})},getAnalytics(){return{totalSubscriptions:1,totalNotificationsSent:0,clickThroughRate:0}}},getAnalytics(){return{geotrigger:{isMonitoring:!1},email:null,webhook:{subscriptions:0},beacon:this.beacon.getAnalytics(),pushNotification:this.pushNotification.getAnalytics()}}};window.initializeSDK=async function(){const e=document.getElementById("init-status");try{e.innerHTML='<div class="info">Initializing SDK...</div>',t=c,await t.initialize(),e.innerHTML='<div class="success">✅ SDK initialized successfully!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Failed to initialize SDK: ${i.message}</div>`}};window.checkHealth=async function(){const e=document.getElementById("init-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{const i=await t.healthCheck();e.innerHTML=`
                    <div class="success">
                        <strong>Health Check Results:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Health check failed: ${i.message}</div>`}};window.setupGeotrigger=function(){const e=document.getElementById("geo-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{t.geotrigger.addRegion({id:"demo-region",center:{latitude:37.7749,longitude:-122.4194},radius:100,name:"Demo Location"}),e.innerHTML='<div class="success">✅ Geofence region added successfully!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Failed to add region: ${i.message}</div>`}};window.getCurrentLocation=async function(){const e=document.getElementById("geo-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Getting current location...</div>';const i=await t.geotrigger.getCurrentLocation();e.innerHTML=`
                    <div class="success">
                        <strong>Current Location:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Failed to get location: ${i.message}</div>`}};window.startMonitoring=async function(){const e=document.getElementById("geo-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Starting geofence monitoring...</div>',await t.geotrigger.startMonitoring(i=>{e.innerHTML+=`
                        <div class="success">
                            <strong>Geofence Event:</strong>
                            <pre>${JSON.stringify(i,null,2)}</pre>
                        </div>
                    `}),e.innerHTML='<div class="success">✅ Geofence monitoring started! (simulated event in 3 seconds)</div>'}catch(i){e.innerHTML=`<div class="error">❌ Failed to start monitoring: ${i.message}</div>`}};window.stopMonitoring=function(){const e=document.getElementById("geo-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}t.geotrigger.stopMonitoring(),e.innerHTML='<div class="success">✅ Geofence monitoring stopped</div>'};window.sendTestEmail=async function(){const e=document.getElementById("email-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Sending test email...</div>';const i=await t.email.send({to:"test@example.com",subject:"Test Email from OMX SDK",body:"This is a test email sent using the OMX SDK.",html:"<h1>Test Email</h1><p>This is a test email sent using the <strong>OMX SDK</strong>.</p>"});e.innerHTML=`
                    <div class="success">
                        <strong>Email Sent:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Failed to send email: ${i.message}</div>`}};window.validateEmail=function(){const e=document.getElementById("email-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}const s=["valid@example.com","invalid-email","test@test.co.uk"].map(o=>({email:o,valid:t.email.validateEmail(o)}));e.innerHTML=`
                <div class="success">
                    <strong>Email Validation Results:</strong>
                    <pre>${JSON.stringify(s,null,2)}</pre>
                </div>
            `};window.testWebhook=async function(){const e=document.getElementById("webhook-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Testing webhook...</div>';const i=await t.webhook.testWebhook("https://httpbin.org/post");e.innerHTML=`
                    <div class="success">
                        <strong>Webhook Test Result:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Webhook test failed: ${i.message}</div>`}};window.createSubscription=async function(){const e=document.getElementById("webhook-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Creating webhook subscription...</div>';const i=await t.webhook.createSubscription("https://your-app.com/webhook",["user.created","order.completed"]);e.innerHTML=`
                    <div class="success">
                        <strong>Subscription Created:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Failed to create subscription: ${i.message}</div>`}};window.initializeBeacon=async function(){const e=document.getElementById("beacon-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Initializing beacon manager...</div>',await t.beacon.initialize(),t.beacon.addRegion({id:"demo-beacon",uuid:"B0702880-A295-A8AB-F734-031A98A512DE",major:1,minor:1,name:"Demo Beacon"}),e.innerHTML='<div class="success">✅ Beacon manager initialized and region added!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Beacon initialization failed: ${i.message}</div>`}};window.startBeaconScanning=async function(){const e=document.getElementById("beacon-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Starting beacon scanning...</div>',await t.beacon.startScanning(),e.innerHTML='<div class="success">✅ Beacon scanning started!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Failed to start beacon scanning: ${i.message}</div>`}};window.stopBeaconScanning=function(){const e=document.getElementById("beacon-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}t.beacon.stopScanning(),e.innerHTML='<div class="success">✅ Beacon scanning stopped</div>'};window.initializePush=async function(){const e=document.getElementById("push-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Initializing push notifications...</div>',await t.pushNotification.initialize(),e.innerHTML='<div class="success">✅ Push notification manager initialized!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Push initialization failed: ${i.message}</div>`}};window.subscribePush=async function(){const e=document.getElementById("push-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{e.innerHTML='<div class="info">Subscribing to push notifications...</div>';const i=await t.pushNotification.subscribe();e.innerHTML=`
                    <div class="success">
                        <strong>Push Subscription Result:</strong>
                        <pre>${JSON.stringify(i,null,2)}</pre>
                    </div>
                `}catch(i){e.innerHTML=`<div class="error">❌ Push subscription failed: ${i.message}</div>`}};window.showLocalNotification=async function(){const e=document.getElementById("push-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}try{await t.pushNotification.showLocalNotification({title:"OMX SDK Demo",body:"This is a local notification from the OMX SDK demo!",icon:'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="40" fill="%23007bff"/></svg>'}),e.innerHTML='<div class="success">✅ Local notification sent!</div>'}catch(i){e.innerHTML=`<div class="error">❌ Failed to show notification: ${i.message}</div>`}};window.getAnalytics=function(){const e=document.getElementById("analytics-status");if(!t){e.innerHTML='<div class="error">Please initialize SDK first</div>';return}const i=t.getAnalytics();e.innerHTML=`
                <div class="success">
                    <strong>SDK Analytics:</strong>
                    <pre>${JSON.stringify(i,null,2)}</pre>
                </div>
            `};
